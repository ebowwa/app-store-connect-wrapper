use app_store_connect_rust::{Client, AppStoreConnectError, AuthenticationError};
use serde_json::json;
use std::env;

#[tokio::main]
async fn main() -> Result<(), AppStoreConnectError> {
    println!("üåô SleepLoops App Store Localization Updater");
    println!("============================================\n");
    
    // Load environment variables from parent directory's .env
    let _ = dotenvy::from_path("../.env");
    
    // Get credentials
    let key_id = env::var("ASC_KEY_ID")
        .map_err(|_| AppStoreConnectError::Authentication(AuthenticationError::new("ASC_KEY_ID not set")))?;
    let issuer_id = env::var("ASC_ISSUER_ID")
        .map_err(|_| AppStoreConnectError::Authentication(AuthenticationError::new("ASC_ISSUER_ID not set")))?;
    let mut private_key_path = env::var("ASC_PRIVATE_KEY_PATH")
        .map_err(|_| AppStoreConnectError::Authentication(AuthenticationError::new("ASC_PRIVATE_KEY_PATH not set")))?;
    
    // If path starts with ./, make it relative to parent directory
    if private_key_path.starts_with("./") {
        private_key_path = format!("../{}", private_key_path.trim_start_matches("./"));
    }
    
    // Initialize client
    let client = Client::new(&key_id, &issuer_id, &private_key_path).await?;
    println!("‚úÖ Client initialized successfully\n");
    
    // SleepLoops bundle ID
    let bundle_id = "com.ebowwa.sleeploops";
    
    // Find the app by bundle ID
    println!("üîç Looking for SleepLoops app...");
    let app = client.get_app_by_bundle_id(bundle_id).await?;
    
    if let Some(app_data) = app {
        let app_id = app_data.get("id")
            .and_then(|id| id.as_str())
            .ok_or_else(|| AppStoreConnectError::Api { 
                message: "App ID not found".to_string() 
            })?;
        
        let app_name = app_data.get("attributes")
            .and_then(|attrs| attrs.get("name"))
            .and_then(|name| name.as_str())
            .unwrap_or("Unknown");
        
        println!("‚úÖ Found app: {} (ID: {})\n", app_name, app_id);
        
        // Define the Spanish (Mexico) localization content
        let spanish_mx_metadata = json!({
            "name": "SleepLoops: Planea Tu Sue√±o",
            "subtitle": "Calculadora Inteligente de Ciclos de Sue√±o",
            "description": r#"SleepLoops te ayuda a despertar renovado calculando los horarios √≥ptimos para dormir y despertar bas√°ndose en los ciclos naturales de sue√±o de 90 minutos.

CARACTER√çSTICAS PRINCIPALES:
‚Ä¢ Calculadora Inteligente de Sue√±o - Encuentra la hora perfecta para acostarte seg√∫n cuando necesitas despertar
‚Ä¢ Optimizador de Hora de Despertar - Descubre los mejores momentos para despertar si te acuestas ahora
‚Ä¢ Ciencia de los Ciclos de Sue√±o - Aprende sobre los ciclos REM de 90 minutos y por qu√© el tiempo importa
‚Ä¢ M√∫ltiples Alarmas - Configura alarmas para horarios √≥ptimos con un solo toque
‚Ä¢ Hermosa Interfaz Oscura - F√°cil para los ojos durante el uso nocturno
‚Ä¢ Simple y R√°pido - Sin rastreo, sin cuentas, solo c√°lculos instant√°neos

POR QU√â IMPORTAN LOS CICLOS DE SUE√ëO:
Despertar en medio de un ciclo de sue√±o puede dejarte sinti√©ndote aturdido y cansado. SleepLoops calcula los momentos √≥ptimos para despertar al final de un ciclo completo, ayud√°ndote a sentirte m√°s renovado y alerta.

LA CIENCIA:
Basado en investigaci√≥n del sue√±o que muestra que nuestro descanso sigue ciclos predecibles de 90 minutos. Al sincronizar tu despertar con las etapas m√°s ligeras del sue√±o, te sentir√°s naturalmente m√°s descansado.

PERFECTO PARA:
‚Ä¢ Estudiantes optimizando horarios de estudio
‚Ä¢ Profesionales manejando horarios irregulares
‚Ä¢ Padres coordinando rutinas de sue√±o familiar
‚Ä¢ Trabajadores por turnos planeando per√≠odos de descanso
‚Ä¢ Cualquiera que quiera despertar sinti√©ndose mejor

¬°Descarga SleepLoops hoy y despierta renovado ma√±ana!"#,
            "keywords": "sue√±o,ciclos,alarma,despertar,dormir,REM,calculadora,calidad,descanso",
            "whatsNew": "Lanzamiento inicial con caracter√≠sticas principales de c√°lculo de ciclos de sue√±o",
            "promotionalText": "¬°Despierta renovado! Calcula tiempos √≥ptimos de sue√±o basados en ciclos de 90 minutos.",
            "marketingUrl": "",
            "supportUrl": "https://github.com/ebowwa/sleeploops-support",
            "privacyPolicyUrl": ""
        });
        
        // Get app info localizations
        println!("üìù Adding Spanish (Mexico) localization...");
        
        // First, get existing app info
        println!("üîç Getting app info...");
        let app_infos = client.apps().get_app_infos(app_id).await?;
        println!("  Found {} app info(s)", app_infos.len());
        
        if let Some(app_info) = app_infos.first() {
            let app_info_id = app_info.get("id")
                .and_then(|id| id.as_str())
                .ok_or_else(|| AppStoreConnectError::Api { 
                    message: "App Info ID not found".to_string() 
                })?;
            
            println!("  App Info ID: {}", app_info_id);
            
            // Get existing localizations to see what's already there
            println!("üîç Checking existing localizations...");
            let existing_localizations = client.localizations().get_all(app_info_id).await?;
            println!("  Found {} existing localization(s)", existing_localizations.len());
            
            for loc in &existing_localizations {
                if let Some(attrs) = loc.get("attributes") {
                    if let Some(locale) = attrs.get("locale").and_then(|l| l.as_str()) {
                        println!("  - {}", locale);
                    }
                }
            }
            
            // Create Spanish (Mexico) localization directly
            println!("\nüìù Creating Spanish (Mexico) localization...");
            
            // Try different locale codes - Apple might use es-ES or es-419 for Latin America
            let locale_code = "es-ES"; // Try Spanish (Spain) first
            println!("  Using locale code: {}", locale_code);
            
            // Extract the values we need
            let name = spanish_mx_metadata.get("name").and_then(|n| n.as_str());
            let subtitle = spanish_mx_metadata.get("subtitle").and_then(|s| s.as_str());
            let privacy_policy_url = spanish_mx_metadata.get("privacyPolicyUrl").and_then(|u| u.as_str());
            
            // Create the localization
            let result = client.localizations().create(
                app_info_id,
                locale_code,
                name,
                subtitle,
                if privacy_policy_url == Some("") { None } else { privacy_policy_url },
                None  // privacy_policy_text
            ).await?;
            
            println!("‚úÖ Successfully added Spanish (Mexico) localization!");
            
            // Print what was created
            if let Some(attrs) = result.get("attributes") {
                println!("\nüìã Created metadata:");
                if let Some(name) = attrs.get("name") {
                    println!("  ‚Ä¢ Name: {}", name);
                }
                if let Some(subtitle) = attrs.get("subtitle") {
                    println!("  ‚Ä¢ Subtitle: {}", subtitle);
                }
                if let Some(locale) = attrs.get("locale") {
                    println!("  ‚Ä¢ Locale: {}", locale);
                }
            }
        } else {
            println!("‚ùå No app info found for this app");
        }
        
    } else {
        println!("‚ùå App with bundle ID '{}' not found", bundle_id);
        println!("\nüì± Available apps:");
        
        // List all available apps to help debug
        let all_apps = client.apps().get_all(Some(20)).await?;
        for app in all_apps.iter() {
            if let Some(attrs) = app.get("attributes") {
                let name = attrs.get("name")
                    .and_then(|n| n.as_str())
                    .unwrap_or("Unknown");
                let bundle = attrs.get("bundleId")
                    .and_then(|b| b.as_str())
                    .unwrap_or("Unknown");
                println!("  - {} ({})", name, bundle);
            }
        }
    }
    
    println!("\n‚ú® Done!");
    Ok(())
}